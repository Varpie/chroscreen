#!/bin/sh

# I had issues with --output default, so I choose to get the 1st connected output xrandr gets
output=$(xrandr -q | grep " connected" | awk '{ print $1 }')
lines=$(echo $output | awk '{print NF}')

# This is used to change the backlight
device=$(ls /sys/class/backlight/)

# Used to change gamma and/or brightness via xrandr
gamma="1:1:1"
brightness="1"

# By default, no verbose is given
verbose=0

print_help() {
	echo "usage: ${0} [OPTION]..."
	echo ""
	echo "Options:"
	echo "  -v, --verbose           Prints useful informations"
	echo "  -g, --gamma R:G:B       Changes the gamma through xrandr"
	echo "      --brightness NUM    Changes the brightness through xrandr"
	echo "                          only use it with NUM > 1, -b should be used otherwise"
	echo "  -r, --reset             Resets xrandr values"
	echo "  -b, --backlight NUM     Changes the backlight (1 ≤ NUM ≤ 256)"
	echo "  -t, --temperature NUM   Experimental (understand: buggy) (1000 ≤ NUM ≤ 40000)"
	echo "  -h, --help              Display help"
}

backlight() {
	if [ -z $backlight ]; then
		echo "Backlight not supported on your device"
	else
		if [ ${1} -lt 1 ] || [ ${1} -gt 256 ]; then
			echo "Backlight should be between 1 and 256"
		else
			if [ $verbose -eq 1 ]; then
				echo "Backlight : from $(cat /sys/class/backlight/$device/brightness) to ${1}"
			fi
			echo ${1} | sudo tee -a /sys/class/backlight/$device/brightness > /dev/null
		fi
	fi
}

reset_xrandr() {
	if [ $lines -gt 1 ]; then
		for o in $output; do
			xrandr --output $o --gamma 1:1:1 --brightness 1
		done
	else
		xrandr --output $output --gamma 1:1:1 --brightness 1
	fi
	if [ $verbose -eq 1 ]; then
		echo "xrandr has been reset (gamma & brightness back to 1)"
	fi
}

change_temperature() {
	if [ ${1} -lt 1000 ] || [ ${1} -gt 40000 ]; then
		echo "Temperature should be between 1000K and 40000K"
		exit 0
	elif [ ${1} -le 6600 ]; then
		RED=255
		GREEN=$(awk "BEGIN {print (99.4708025861 * log($1/100) - 161.1195681661)}")
		BLUE=$(awk "BEGIN {print (138.5177312231 * log($1/100 - 10) - 305.0447927307)}")
	else
		RED=$(awk "BEGIN {print (329.698727446 * ($1/100 - 60) ^ (-0.1332047592))}")
		GREEN=$(awk "BEGIN {print (288.1221695283 * ($1/100 - 60) ^ (-0.0755148492))}")
		BLUE=255
	fi

	if [ $verbose -eq 1 ]; then
		echo "Translating temp. into RGB. Now R=$RED G=$GREEN B=$BLUE"
	fi

	# next part is about staying between 0 and 255
	number=1.0

	min_max() {
		# getting tired of using awk for simple stuff, because it's floating numbers
		number=$(awk "BEGIN {
			if ($1 > 255) print 255;
			else if ($1 < 0) print 0;
			else print $1;
		}")
	}

	min_max $RED; RED=$number
	min_max $GREEN; GREEN=$number
	min_max $BLUE; BLUE=$number

	if [ $verbose -eq 1 ]; then
		echo "Put back values into 0-255. Now R=$RED G=$GREEN B=$BLUE"
	fi

	# xrandr is using cmyk, so I have to convert RGB to cmy
	rgb_to_cmy() {
		number=$(awk "BEGIN {
			print 2 - $1/255;
		}")
	}

	rgb_to_cmy $RED; RED=$number
	rgb_to_cmy $GREEN; GREEN=$number
	rgb_to_cmy $BLUE; BLUE=$number

	if [ $verbose -eq 1 ]; then
		echo "Translated from RGB to CMY. Now R=$RED G=$GREEN B=$BLUE"
	fi

	# normalizing, not sure it's necessary, though...
	norm=$(awk "BEGIN {print 3/($RED+$GREEN+$BLUE)}")

	normalize() {
		number=$(awk "BEGIN {
			print $1*$norm;
		}")
	}

	normalize $RED; RED=$number
	normalize $GREEN; GREEN=$number
	normalize $BLUE; BLUE=$number

	if [ $verbose -eq 1 ]; then
		echo "R=$RED G=$GREEN B=$BLUE"
	fi

	# Finally, changing that gamma.
	if [ $lines -gt 1 ]; then
		for o in $output; do
			xrandr --output $o --gamma $RED:$GREEN:$BLUE
		done
	else
		xrandr --output $output --gamma $RED:$GREEN:$BLUE
	fi
}

# No argument given, since this program is useless on its own, print help and quit
if [ ${#} = 0 ]; then
	print_help
	exit 0
fi

# Parsing arguments (god, I love this way of doing it)
while [ ${#} != 0 ]; do
	case "${1}" in
	-h | --help)
		print_help
		exit 0;;
	-g | --gamma)
		gamma=${2}
		xrandr_changed=true
		shift 2;;
	--brightness)
		brightness=${2}
		xrandr_changed=true
		shift 2;;
	-b | --backlight)
		backlight ${2}
		shift 2;;
	-r | --reset)
		reset_xrandr
		shift;;
	-t | --temperature)
		change_temperature ${2}
		shift 2;;
	-v | --verbose)
		verbose=1
		shift;;
	*)
		print_help
		exit 0;;
	esac
done

# I have to do both at once, xrandr doesn't like doing one then the other.
if [ "$xrandr_changed" = "true" ]; then
	# That ridiculous case is done to be able to enter only 1 value into gamma.
	case "$gamma" in
		*:*)
			;;
		*)
			gamma="$gamma:$gamma:$gamma"
			if [ $verbose -eq 1 ]; then
				echo "Gamma syntax wasn't correct. It now is $gamma"
			fi
			;;
	esac
	if [ $lines -gt 1 ]; then
		for o in $output; do
			xrandr --output $o --gamma $gamma --brightness $brightness
		done
	else
		xrandr --output $output --gamma $gamma --brightness $brightness
	fi
fi
